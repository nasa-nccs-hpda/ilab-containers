#-------------------------------------------------------------------------------
# dsg10x runs Centos
#-------------------------------------------------------------------------------
FROM centos
RUN yum upgrade-minimal

#-------------------------------------------------------------------------------
# System Dependencies
#
# Centos comes with:
#   bash completion
#
# Git added many packages, including:  pip, openSSH
#-------------------------------------------------------------------------------
RUN yum install -y \
	git \
	man-pages \
	man \
	python3 \
	sudo \
	which
	
#-------------------------------------------------------------------------------
# GEOS
#
# This is broken into sections to isolate troublesome parts and decrease build
# time.
#
# Test:  configure should say "Python bindings: true" at end of its output.
#        If not, ensure swig is enabled.  If not, ensure it is installed.
#-------------------------------------------------------------------------------
ARG dataStoreDir="/mnt/data-store/"

RUN yum install -y \
	bzip2 \
	diffutils \
	file \
	gcc-c++ \
	make \
	python3-devel \
	swig \
	wget
	
RUN mkdir $dataStoreDir \
    && cd $dataStoreDir \
    && wget http://download.osgeo.org/geos/geos-3.8.1.tar.bz2  \
    && tar -xjf geos-3.8.1.tar.bz2 \
    && rm geos-3.8.1.tar.bz2

# ---
# Python appends an "m" to its version internally, but reports its version
# without it.  This prevents configure from finding Python.h.  To work
# around this, create a symbolic link.  The same thing happens with
# libpython3.6m.*.  All that said, the the include is working without the
# link now.  What changed?  I do not know.
# ---
RUN ln -s /usr/lib64/libpython3.6m.so /usr/lib64/libpython3.6.so \
	&& ln -s /usr/lib64/libpython3.6m.so.1.0 /usr/lib64/libpython3.6.so.1.0

RUN cd $dataStoreDir\geos-3.8.1 \
    && ./configure --enable-python --enable-static --with-pic \
    && make \
    && make install
	
#-------------------------------------------------------------------------------
# GDAL
#
# Used by: ImageFile and others
#
# Test:  "gdalinfo --version" it should be what you expect
# Test:  "gdalinfo --formats | grep -i hdf" should include HDF4 and HDF5
# Test:  "ogr2ogr" --formats | grep -i gdb" should include FileGDB
# Test:  export LD_LIBRARY_PATH=/usr/local/lib, Python shell,
#        from osgeo import gdal, should produce no error
#
# First, add the yum repositories containing proj.
#-------------------------------------------------------------------------------
RUN yum install -y \
	https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

# Fror some reason, this does not work when combined with the line above.
RUN yum install -y proj-devel

# Install netcdf.	
RUN yum install -y dnf-plugins-core
RUN dnf config-manager --set-enabled powertools

RUN yum install -y netcdf-devel

# Install FileGDB.
RUN cd $dataStoreDir \
	&&  wget https://github.com/Esri/file-geodatabase-api/raw/master/FileGDB_API_1.5/FileGDB_API_1_5_64gcc51.tar.gz \
	&& tar -zxf FileGDB_API_1_5_64gcc51.tar.gz \
	&& rm FileGDB_API_1_5_64gcc51.tar.gz

# GDAL, finally.
ARG gdalVersion=3.2.0
ARG gdalName=gdal-$gdalVersion

RUN cd $dataStoreDir \
    && wget http://download.osgeo.org/gdal/$gdalVersion/$gdalName.tar.gz \
    && tar -zxf $gdalName.tar.gz \
    && rm $gdalName.tar.gz
	
RUN cd $dataStoreDir/$gdalName \
	&& ./configure LIBTOOL='/usr/bin/libtool --tag=CC' --with-python --enable-static --with-pic -with-geos=yes --with-netcdf --with-fgdb=/mnt/data-store/FileGDB_API-64gcc51 \
	&& export LD_LIBRARY_PATH=/mnt/data-store/FileGDB_API-64gcc51/lib/:/usr/local/lib \
    && make \
    && make install

#-------------------------------------------------------------------------------
# Used by: date_range in MasRequest
#-------------------------------------------------------------------------------
RUN sudo python3 -m pip install setuptools pandas

#-------------------------------------------------------------------------------
# Java, for maxent.jar
#-------------------------------------------------------------------------------
RUN yum install -y java-1.8.0-openjdk

#-------------------------------------------------------------------------------
# Celery
#
# Used for: distributed processing in request objects
#-------------------------------------------------------------------------------
RUN python3 -m pip install --upgrade pip celery[redis]
RUN yum install -y redis telnet

#-------------------------------------------------------------------------------
# Create a user.
#-------------------------------------------------------------------------------
ARG ilPw=mungeIt

RUN adduser -p $(openssl passwd -crypt $ilPw) ilUser \
	&& usermod -aG wheel ilUser

USER ilUser
ARG homeDir="/home/ilUser"
RUN echo "umask 0000" >> ~/.bashrc \
	&& echo "export LD_LIBRARY_PATH=/mnt/data-store/FileGDB_API-64gcc51/lib/:/usr/local/lib" >> ~/.bashrc


